# Default values for cortex.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: thehiveproject/cortex
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true

  # Cortex's entrypoint script has to run as root because it chowns
  # some stuff while starting up. This could perhaps be changed for
  # the better in the case of Kubernetes by using an InitContainer,
  # but at this writing that hasn't happened yet. In any case, the
  # serving process does not run as root.

  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9001

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: cortex.example.com
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# If no elasticsearch method is enabled, local indexing will be used;
# see localIndexStorage below.
elasticsearch:
  # Elasticsearch set up outside this chart using Elastic Cloud on
  # Kubernetes (ECK)
  eck:
    # If true, names of resources (e.g. secrets, services) used will
    # all be formed using the name below, unless you override them.
    enabled: false
    # Specify the name of the Elasticsearch custom resource, which
    # must have been successfully created before using this chart.
    name: ""
  # Elasticsearch set up outside this chart, with less
  # assumptions. You will need to set more values; read on below.
  external:
    # Set this to true if you have an Elasticsearch server or cluster
    # that was not set up with ECK. You'll need to set other
    # elasticsearch.* values.
    enabled: false
  # If ECK is used, you don't need to mess with the rest of these.
  # -----------------------------------------------------------------
  #
  # Username to use when connecting to Elasticsearch.
  username: elastic
  # The name of an opaque secret, whose data is a mapping (dictionary,
  # object) with the username as key and the password as value. If ECK
  # is enabled, the default is the secret created by ECK. If ECK is
  # not enabled, this must be set.
  userSecret: ""
  # Where to reach the Elasticsearch cluster. Probably
  # "https://something:9200". If ECK is enabled, the default is the
  # service created by ECK.
  url: ""
  # If true, this chart expects to tell Cortex a CA cert to trust when
  # connecting to Elasticsearch. If ECK is enabled, this has to be set
  # to true. If ECK is not enabled and this is set to true, you need
  # to provide a CA certificate using the caCertSecret or caCert
  # values.
  tls: true
  # The name of a Kubernetes Secret object containing a CA cert to
  # trust when connecting to Elasticsearch using HTTPS. The secret
  # should contain a mapping with a key, named by
  # `caCertSecretMappingKey`, whose value is the PEM-encoded cert. If
  # ECK is enabled, the default is the appropriate secret created by
  # ECK. If ECK is not enabled, and this is not set, a Secret will be
  # created using the `caCert` value below. N.B. despite the
  # juxtaposition of the words `caCert` and `Secret`, the private key
  # of the certificate authority is far from what we are talking about
  # here.
  caCertSecret: ""
  # The name of the key inside the caCertSecret, whose value is the
  # PEM-encoded cert. N.B. despite the juxtaposition of the words
  # `caCert` and `Secret`, the private key of the certificate
  # authority is far from what we are talking about here.
  caCertSecretMappingKey: "ca.crt"
  # A PEM-encoded certification authority certificate to trust when
  # connecting to Elasticsearch. Used to construct a Secret in cases
  # where ECK is not enabled, `tls` is enabled, and `caCertSecret` is
  # not set.
  caCert: ""



# Cortex sends inputs to analyzers and receives reports back via a
# persistent volume it shares with the jobs. These are the parameters
# for that filesystem. It's created with the ReadWriteMany access
# mode, which tells the cluster that both the Cortex pod and the
# analyzer/responder job pod will need to be able both to read and
# write this volume. Far fewer storage drivers support this mode than
# ReadWriteOnce, but at least one should support you. You may have to
# manually create the PersistentVolume that backs this claim.
jobIOStorage:
  pvc:
    enabled: true
    storageClass: default
    size: 10Gi

# Secrets containing CA certs to trust when Cortex makes outgoing TLS
# connections. Each Secret named here should contain a key "ca.crt"
# whose value is the PEM-encoded CA certificate.
trustRootCertsInSecrets: []

# CA certs to trust when Cortex makes outgoing TLS connections. This
# chart will create Secrets containing the certs. Each item should be
# the text of a single PEM-encoded certificate.
trustRootCerts: []
